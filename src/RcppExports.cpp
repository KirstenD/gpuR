// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_detectCPUs
SEXP cpp_detectCPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectCPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectCPUs(platform_idx));
    return __result;
END_RCPP
}
// cpp_detectGPUs
SEXP cpp_detectGPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectGPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectGPUs(platform_idx));
    return __result;
END_RCPP
}
// detectPlatforms
SEXP detectPlatforms();
RcppExport SEXP gpuR_detectPlatforms() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(detectPlatforms());
    return __result;
END_RCPP
}
// cpp_device_has_double
bool cpp_device_has_double(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_device_has_double(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_device_has_double(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// SetMatRow
void SetMatRow(SEXP ptrA, const int idx, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetMatRow(SEXP ptrASEXP, SEXP idxSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetMatRow(ptrA, idx, value, type_flag);
    return R_NilValue;
END_RCPP
}
// SetMatCol
void SetMatCol(SEXP ptrA, const int idx, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetMatCol(SEXP ptrASEXP, SEXP idxSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetMatCol(ptrA, idx, value, type_flag);
    return R_NilValue;
END_RCPP
}
// SetMatElement
void SetMatElement(SEXP ptrA, const int nr, const int nc, SEXP value, const int type_flag);
RcppExport SEXP gpuR_SetMatElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP valueSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    SetMatElement(ptrA, nr, nc, value, type_flag);
    return R_NilValue;
END_RCPP
}
// GetMatRow
SEXP GetMatRow(SEXP ptrA, const int idx, const int type_flag);
RcppExport SEXP gpuR_GetMatRow(SEXP ptrASEXP, SEXP idxSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetMatRow(ptrA, idx, type_flag));
    return __result;
END_RCPP
}
// GetMatCol
SEXP GetMatCol(SEXP ptrA, const int idx, const int type_flag);
RcppExport SEXP gpuR_GetMatCol(SEXP ptrASEXP, SEXP idxSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetMatCol(ptrA, idx, type_flag));
    return __result;
END_RCPP
}
// GetMatElement
SEXP GetMatElement(SEXP ptrA, const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_GetMatElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(GetMatElement(ptrA, nr, nc, type_flag));
    return __result;
END_RCPP
}
// vectorToSEXP
SEXP vectorToSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_vectorToSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vectorToSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// vectorToMat
SEXP vectorToMat(SEXP ptrA, const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_vectorToMat(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vectorToMat(ptrA, nr, nc, type_flag));
    return __result;
END_RCPP
}
// matrixToGPUXptr
SEXP matrixToGPUXptr(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_matrixToGPUXptr(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(matrixToGPUXptr(ptrA, type_flag));
    return __result;
END_RCPP
}
// VecXptrToVecSEXP
SEXP VecXptrToVecSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_VecXptrToVecSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(VecXptrToVecSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// MatXptrToMatSEXP
SEXP MatXptrToMatSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_MatXptrToMatSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(MatXptrToMatSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// emptyVecXptr
SEXP emptyVecXptr(const int size, const int type_flag);
RcppExport SEXP gpuR_emptyVecXptr(SEXP sizeSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyVecXptr(size, type_flag));
    return __result;
END_RCPP
}
// emptyMatXptr
SEXP emptyMatXptr(const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_emptyMatXptr(SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyMatXptr(nr, nc, type_flag));
    return __result;
END_RCPP
}
// cpp_gpuInfo
List cpp_gpuInfo(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_gpuInfo(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_gpuInfo(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// cpp_gpuMatrix_iaxpy
void cpp_gpuMatrix_iaxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuMatrix_iaxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuMatrix_iaxpy(alpha_, ptrA_, ptrB_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_igemm
void cpp_gpuMatrix_igemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuMatrix_igemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuMatrix_igemm(ptrA_, ptrB_, ptrC_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpu_two_vec
void cpp_gpu_two_vec(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, SEXP sourceCode_, SEXP kernel_function_);
RcppExport SEXP gpuR_cpp_gpu_two_vec(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP sourceCode_SEXP, SEXP kernel_function_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_function_(kernel_function_SEXP);
    cpp_gpu_two_vec(ptrA_, ptrB_, ptrC_, sourceCode_, kernel_function_);
    return R_NilValue;
END_RCPP
}
// cpp_gpuVector_iaxpy
void cpp_gpuVector_iaxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuVector_iaxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuVector_iaxpy(alpha_, ptrA_, ptrB_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_platformInfo
List cpp_platformInfo(SEXP platform_idx_);
RcppExport SEXP gpuR_cpp_platformInfo(SEXP platform_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    __result = Rcpp::wrap(cpp_platformInfo(platform_idx_));
    return __result;
END_RCPP
}
// truncIntgpuMat
SEXP truncIntgpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncIntgpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncIntgpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// truncFloatgpuMat
SEXP truncFloatgpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncFloatgpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncFloatgpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// truncDoublegpuMat
SEXP truncDoublegpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncDoublegpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncDoublegpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// cpp_dncol
int cpp_dncol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dncol(ptrA));
    return __result;
END_RCPP
}
// cpp_fncol
int cpp_fncol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fncol(ptrA));
    return __result;
END_RCPP
}
// cpp_incol
int cpp_incol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_incol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_incol(ptrA));
    return __result;
END_RCPP
}
// cpp_dnrow
int cpp_dnrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dnrow(ptrA));
    return __result;
END_RCPP
}
// cpp_fnrow
int cpp_fnrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fnrow(ptrA));
    return __result;
END_RCPP
}
// cpp_inrow
int cpp_inrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_inrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_inrow(ptrA));
    return __result;
END_RCPP
}
// cpp_dgpuVec_size
int cpp_dgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_fgpuVec_size
int cpp_fgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_igpuVec_size
int cpp_igpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_igpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_igpuVec_size(ptrA));
    return __result;
END_RCPP
}
// vcl_dncol
int vcl_dncol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dncol(ptrA));
    return __result;
END_RCPP
}
// vcl_fncol
int vcl_fncol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fncol(ptrA));
    return __result;
END_RCPP
}
// vcl_incol
int vcl_incol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_incol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_incol(ptrA));
    return __result;
END_RCPP
}
// vcl_dnrow
int vcl_dnrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dnrow(ptrA));
    return __result;
END_RCPP
}
// vcl_fnrow
int vcl_fnrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fnrow(ptrA));
    return __result;
END_RCPP
}
// vcl_inrow
int vcl_inrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_inrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_inrow(ptrA));
    return __result;
END_RCPP
}
// vcl_dgpuVec_size
int vcl_dgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// vcl_fgpuVec_size
int vcl_fgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// vcl_igpuVec_size
int vcl_igpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_vcl_igpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_igpuVec_size(ptrA));
    return __result;
END_RCPP
}
// matrixToVCL
SEXP matrixToVCL(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_matrixToVCL(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(matrixToVCL(ptrA, type_flag));
    return __result;
END_RCPP
}
// VCLtoMatSEXP
SEXP VCLtoMatSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_VCLtoMatSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(VCLtoMatSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// emptyVCL
SEXP emptyVCL(const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_emptyVCL(SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyVCL(nr, nc, type_flag));
    return __result;
END_RCPP
}
// vclSetCol
void vclSetCol(SEXP ptrA, const int nc, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclSetCol(SEXP ptrASEXP, SEXP ncSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclSetCol(ptrA, nc, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vclSetRow
void vclSetRow(SEXP ptrA, const int nr, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclSetRow(SEXP ptrASEXP, SEXP nrSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclSetRow(ptrA, nr, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vclSetElement
void vclSetElement(SEXP ptrA, const int nr, const int nc, SEXP newdata, const int type_flag);
RcppExport SEXP gpuR_vclSetElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP newdataSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    vclSetElement(ptrA, nr, nc, newdata, type_flag);
    return R_NilValue;
END_RCPP
}
// vclGetCol
SEXP vclGetCol(SEXP ptrA, const int nc, const int type_flag);
RcppExport SEXP gpuR_vclGetCol(SEXP ptrASEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclGetCol(ptrA, nc, type_flag));
    return __result;
END_RCPP
}
// vclGetRow
SEXP vclGetRow(SEXP ptrA, const int nr, const int type_flag);
RcppExport SEXP gpuR_vclGetRow(SEXP ptrASEXP, SEXP nrSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclGetRow(ptrA, nr, type_flag));
    return __result;
END_RCPP
}
// vclGetElement
SEXP vclGetElement(SEXP ptrA, const int nr, const int nc, const int type_flag);
RcppExport SEXP gpuR_vclGetElement(SEXP ptrASEXP, SEXP nrSEXP, SEXP ncSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const int >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vclGetElement(ptrA, nr, nc, type_flag));
    return __result;
END_RCPP
}
// vectorToVCL
SEXP vectorToVCL(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_vectorToVCL(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(vectorToVCL(ptrA, type_flag));
    return __result;
END_RCPP
}
// VCLtoVecSEXP
SEXP VCLtoVecSEXP(SEXP ptrA, const int type_flag);
RcppExport SEXP gpuR_VCLtoVecSEXP(SEXP ptrASEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(VCLtoVecSEXP(ptrA, type_flag));
    return __result;
END_RCPP
}
// emptyVecVCL
SEXP emptyVecVCL(int length, const int type_flag);
RcppExport SEXP gpuR_emptyVecVCL(SEXP lengthSEXP, SEXP type_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< const int >::type type_flag(type_flagSEXP);
    __result = Rcpp::wrap(emptyVecVCL(length, type_flag));
    return __result;
END_RCPP
}
// cpp_vienna_gpuMatrix_daxpy
void cpp_vienna_gpuMatrix_daxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_daxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_daxpy(alpha_, ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_saxpy
void cpp_vienna_gpuMatrix_saxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_saxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_saxpy(alpha_, ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_prod
void cpp_vienna_dgpuMatrix_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_prod
void cpp_vienna_sgpuMatrix_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_div
void cpp_vienna_dgpuMatrix_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_div
void cpp_vienna_sgpuMatrix_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_sin
void cpp_vienna_dgpuMatrix_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_asin
void cpp_vienna_dgpuMatrix_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_sinh
void cpp_vienna_dgpuMatrix_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_sin
void cpp_vienna_sgpuMatrix_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_asin
void cpp_vienna_sgpuMatrix_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_sinh
void cpp_vienna_sgpuMatrix_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_cos
void cpp_vienna_dgpuMatrix_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_acos
void cpp_vienna_dgpuMatrix_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_cosh
void cpp_vienna_dgpuMatrix_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_cos
void cpp_vienna_sgpuMatrix_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_acos
void cpp_vienna_sgpuMatrix_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_cosh
void cpp_vienna_sgpuMatrix_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_tan
void cpp_vienna_dgpuMatrix_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_atan
void cpp_vienna_dgpuMatrix_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_tanh
void cpp_vienna_dgpuMatrix_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_tan
void cpp_vienna_sgpuMatrix_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_atan
void cpp_vienna_sgpuMatrix_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_tanh
void cpp_vienna_sgpuMatrix_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_log
void cpp_vienna_sgpuMatrix_elem_log(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_log(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_log(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_log10
void cpp_vienna_sgpuMatrix_elem_log10(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_log10(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_log10(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_log_base
void cpp_vienna_sgpuMatrix_elem_log_base(SEXP ptrA_, SEXP ptrC_, float base, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_log_base(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP baseSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< float >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_log_base(ptrA_, ptrC_, base, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_exp
void cpp_vienna_sgpuMatrix_elem_exp(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_exp(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuMatrix_elem_exp(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_log
void cpp_vienna_dgpuMatrix_elem_log(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_log(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_log(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_log10
void cpp_vienna_dgpuMatrix_elem_log10(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_log10(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_log10(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_log_base
void cpp_vienna_dgpuMatrix_elem_log_base(SEXP ptrA_, SEXP ptrC_, double base, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_log_base(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP baseSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_log_base(ptrA_, ptrC_, base, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_exp
void cpp_vienna_dgpuMatrix_elem_exp(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_exp(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_elem_exp(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_daxpy
void cpp_vclMatrix_daxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_daxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_daxpy(alpha_, ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_saxpy
void cpp_vclMatrix_saxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_saxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_saxpy(alpha_, ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_prod
void cpp_dvclMatrix_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_prod
void cpp_svclMatrix_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_div
void cpp_dvclMatrix_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_div
void cpp_svclMatrix_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_sin
void cpp_dvclMatrix_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_asin
void cpp_dvclMatrix_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_sinh
void cpp_dvclMatrix_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_sin
void cpp_svclMatrix_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_asin
void cpp_svclMatrix_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_sinh
void cpp_svclMatrix_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_cos
void cpp_dvclMatrix_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_acos
void cpp_dvclMatrix_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_cosh
void cpp_dvclMatrix_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_cos
void cpp_svclMatrix_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_acos
void cpp_svclMatrix_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_cosh
void cpp_svclMatrix_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_tan
void cpp_dvclMatrix_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_atan
void cpp_dvclMatrix_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_tanh
void cpp_dvclMatrix_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_tan
void cpp_svclMatrix_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_atan
void cpp_svclMatrix_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_tanh
void cpp_svclMatrix_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_log
void cpp_svclMatrix_elem_log(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_log(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_log(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_log10
void cpp_svclMatrix_elem_log10(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_log10(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_log10(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_log_base
void cpp_svclMatrix_elem_log_base(SEXP ptrA_, SEXP ptrC_, float base, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_log_base(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP baseSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< float >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_log_base(ptrA_, ptrC_, base, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclMatrix_elem_exp
void cpp_svclMatrix_elem_exp(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclMatrix_elem_exp(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclMatrix_elem_exp(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_log
void cpp_dvclMatrix_elem_log(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_log(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_log(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_log10
void cpp_dvclMatrix_elem_log10(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_log10(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_log10(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_log_base
void cpp_dvclMatrix_elem_log_base(SEXP ptrA_, SEXP ptrC_, double base, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_log_base(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP baseSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_log_base(ptrA_, ptrC_, base, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclMatrix_elem_exp
void cpp_dvclMatrix_elem_exp(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclMatrix_elem_exp(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclMatrix_elem_exp(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuVector_dgev_inner
SEXP cpp_vienna_gpuVector_dgev_inner(SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuVector_dgev_inner(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(cpp_vienna_gpuVector_dgev_inner(ptrA_, ptrB_, device_flag));
    return __result;
END_RCPP
}
// cpp_vienna_gpuVector_sgev_inner
SEXP cpp_vienna_gpuVector_sgev_inner(SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuVector_sgev_inner(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(cpp_vienna_gpuVector_sgev_inner(ptrA_, ptrB_, device_flag));
    return __result;
END_RCPP
}
// cpp_vienna_gpuVector_dgev_outer
void cpp_vienna_gpuVector_dgev_outer(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuVector_dgev_outer(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuVector_dgev_outer(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuVector_sgev_outer
void cpp_vienna_gpuVector_sgev_outer(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuVector_sgev_outer(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuVector_sgev_outer(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuVector_daxpy
void cpp_vienna_gpuVector_daxpy(SEXP alpha_, SEXP A_, SEXP B_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuVector_daxpy(SEXP alpha_SEXP, SEXP A_SEXP, SEXP B_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuVector_daxpy(alpha_, A_, B_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuVector_saxpy
void cpp_vienna_gpuVector_saxpy(SEXP alpha_, SEXP A_, SEXP B_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuVector_saxpy(SEXP alpha_SEXP, SEXP A_SEXP, SEXP B_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuVector_saxpy(alpha_, A_, B_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_prod
void cpp_vienna_dgpuVector_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_prod
void cpp_vienna_sgpuVector_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_div
void cpp_vienna_dgpuVector_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_div
void cpp_vienna_sgpuVector_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_sin
void cpp_vienna_dgpuVector_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_asin
void cpp_vienna_dgpuVector_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_sinh
void cpp_vienna_dgpuVector_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_sin
void cpp_vienna_sgpuVector_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_asin
void cpp_vienna_sgpuVector_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_sinh
void cpp_vienna_sgpuVector_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_cos
void cpp_vienna_dgpuVector_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_acos
void cpp_vienna_dgpuVector_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_cosh
void cpp_vienna_dgpuVector_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_cos
void cpp_vienna_sgpuVector_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_acos
void cpp_vienna_sgpuVector_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_cosh
void cpp_vienna_sgpuVector_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_tan
void cpp_vienna_dgpuVector_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_atan
void cpp_vienna_dgpuVector_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuVector_elem_tanh
void cpp_vienna_dgpuVector_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuVector_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuVector_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_tan
void cpp_vienna_sgpuVector_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_atan
void cpp_vienna_sgpuVector_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuVector_elem_tanh
void cpp_vienna_sgpuVector_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_sgpuVector_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_sgpuVector_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_daxpy
void cpp_vclVector_daxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vclVector_daxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclVector_daxpy(alpha_, ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclVector_saxpy
void cpp_vclVector_saxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vclVector_saxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclVector_saxpy(alpha_, ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_inner_prod
double cpp_dvclVector_inner_prod(SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_inner_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(cpp_dvclVector_inner_prod(ptrA_, ptrB_, device_flag));
    return __result;
END_RCPP
}
// cpp_svclVector_inner_prod
float cpp_svclVector_inner_prod(SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_inner_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    __result = Rcpp::wrap(cpp_svclVector_inner_prod(ptrA_, ptrB_, device_flag));
    return __result;
END_RCPP
}
// cpp_dvclVector_outer_prod
void cpp_dvclVector_outer_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_outer_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_outer_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_outer_prod
void cpp_svclVector_outer_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_outer_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_outer_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_prod
void cpp_dvclVector_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_prod
void cpp_svclVector_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_prod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_div
void cpp_dvclVector_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_div
void cpp_svclVector_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_div(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_sin
void cpp_dvclVector_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_asin
void cpp_dvclVector_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_sinh
void cpp_dvclVector_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_sin
void cpp_svclVector_elem_sin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_sin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_asin
void cpp_svclVector_elem_asin(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_asin(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_asin(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_sinh
void cpp_svclVector_elem_sinh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_sinh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_sinh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_cos
void cpp_dvclVector_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_acos
void cpp_dvclVector_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_cosh
void cpp_dvclVector_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_cos
void cpp_svclVector_elem_cos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_cos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_acos
void cpp_svclVector_elem_acos(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_acos(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_acos(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_cosh
void cpp_svclVector_elem_cosh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_cosh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_cosh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_tan
void cpp_dvclVector_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_atan
void cpp_dvclVector_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_tanh
void cpp_dvclVector_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_tan
void cpp_svclVector_elem_tan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_tan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_atan
void cpp_svclVector_elem_atan(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_atan(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_atan(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_tanh
void cpp_svclVector_elem_tanh(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_tanh(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_tanh(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_log
void cpp_svclVector_elem_log(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_log(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_log(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_log10
void cpp_svclVector_elem_log10(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_log10(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_log10(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_log_base
void cpp_svclVector_elem_log_base(SEXP ptrA_, SEXP ptrC_, float base, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_log_base(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP baseSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< float >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_log_base(ptrA_, ptrC_, base, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_svclVector_elem_exp
void cpp_svclVector_elem_exp(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_svclVector_elem_exp(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_svclVector_elem_exp(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_log
void cpp_dvclVector_elem_log(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_log(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_log(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_log10
void cpp_dvclVector_elem_log10(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_log10(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_log10(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_log_base
void cpp_dvclVector_elem_log_base(SEXP ptrA_, SEXP ptrC_, double base, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_log_base(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP baseSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_log_base(ptrA_, ptrC_, base, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_dvclVector_elem_exp
void cpp_dvclVector_elem_exp(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_dvclVector_elem_exp(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_dvclVector_elem_exp(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_dgemm
void cpp_vienna_gpuMatrix_dgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_dgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_dgemm(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_sgemm
void cpp_vienna_gpuMatrix_sgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_sgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_sgemm(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_igemm
void cpp_vienna_gpuMatrix_igemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_igemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_igemm(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_dcrossprod
void cpp_vienna_gpuMatrix_dcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_dcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_dcrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_scrossprod
void cpp_vienna_gpuMatrix_scrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_scrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_scrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_dtcrossprod
void cpp_vienna_gpuMatrix_dtcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_dtcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_dtcrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_stcrossprod
void cpp_vienna_gpuMatrix_stcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_stcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_gpuMatrix_stcrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_dgemm
void cpp_vclMatrix_dgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_dgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_dgemm(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_sgemm
void cpp_vclMatrix_sgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_sgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_sgemm(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_dcrossprod
void cpp_vclMatrix_dcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_dcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_dcrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_scrossprod
void cpp_vclMatrix_scrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_scrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_scrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_dtcrossprod
void cpp_vclMatrix_dtcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_dtcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_dtcrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_stcrossprod
void cpp_vclMatrix_stcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vclMatrix_stcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vclMatrix_stcrossprod(ptrA_, ptrB_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_eigen
void cpp_vienna_fgpuMatrix_eigen(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, bool symmetric, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_eigen(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP symmetricSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_fgpuMatrix_eigen(ptrA_, ptrB_, ptrC_, symmetric, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_eigen
void cpp_vienna_dgpuMatrix_eigen(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, bool symmetric, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_eigen(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP symmetricSEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_eigen(ptrA_, ptrB_, ptrC_, symmetric, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_pmcc
void cpp_vienna_fgpuMatrix_pmcc(SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_pmcc(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_fgpuMatrix_pmcc(ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_pmcc
void cpp_vienna_dgpuMatrix_pmcc(SEXP ptrA_, SEXP ptrB_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_pmcc(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_pmcc(ptrA_, ptrB_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_colmean
void cpp_vienna_fgpuMatrix_colmean(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_colmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_fgpuMatrix_colmean(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_colmean
void cpp_vienna_dgpuMatrix_colmean(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_colmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_colmean(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_colsum
void cpp_vienna_fgpuMatrix_colsum(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_colsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_fgpuMatrix_colsum(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_colsum
void cpp_vienna_dgpuMatrix_colsum(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_colsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_colsum(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_rowmean
void cpp_vienna_fgpuMatrix_rowmean(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_rowmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_fgpuMatrix_rowmean(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_rowmean
void cpp_vienna_dgpuMatrix_rowmean(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_rowmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_rowmean(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_rowsum
void cpp_vienna_fgpuMatrix_rowsum(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_rowsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_fgpuMatrix_rowsum(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_rowsum
void cpp_vienna_dgpuMatrix_rowsum(SEXP ptrA_, SEXP ptrC_, int device_flag);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_rowsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP, SEXP device_flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< int >::type device_flag(device_flagSEXP);
    cpp_vienna_dgpuMatrix_rowsum(ptrA_, ptrC_, device_flag);
    return R_NilValue;
END_RCPP
}
