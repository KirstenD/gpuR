// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_detectCPUs
SEXP cpp_detectCPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectCPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectCPUs(platform_idx));
    return __result;
END_RCPP
}
// cpp_detectGPUs
SEXP cpp_detectGPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectGPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectGPUs(platform_idx));
    return __result;
END_RCPP
}
// detectPlatforms
SEXP detectPlatforms();
RcppExport SEXP gpuR_detectPlatforms() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(detectPlatforms());
    return __result;
END_RCPP
}
// cpp_device_has_double
bool cpp_device_has_double(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_device_has_double(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_device_has_double(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// vectorToIntXptr
SEXP vectorToIntXptr(SEXP data);
RcppExport SEXP gpuR_vectorToIntXptr(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(vectorToIntXptr(data));
    return __result;
END_RCPP
}
// vectorToFloatXptr
SEXP vectorToFloatXptr(SEXP data);
RcppExport SEXP gpuR_vectorToFloatXptr(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(vectorToFloatXptr(data));
    return __result;
END_RCPP
}
// vectorToDoubleXptr
SEXP vectorToDoubleXptr(SEXP data);
RcppExport SEXP gpuR_vectorToDoubleXptr(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(vectorToDoubleXptr(data));
    return __result;
END_RCPP
}
// vectorToIntMatXptr
SEXP vectorToIntMatXptr(SEXP data, int nr, int nc);
RcppExport SEXP gpuR_vectorToIntMatXptr(SEXP dataSEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(vectorToIntMatXptr(data, nr, nc));
    return __result;
END_RCPP
}
// vectorToFloatMatXptr
SEXP vectorToFloatMatXptr(SEXP data, int nr, int nc);
RcppExport SEXP gpuR_vectorToFloatMatXptr(SEXP dataSEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(vectorToFloatMatXptr(data, nr, nc));
    return __result;
END_RCPP
}
// vectorToDoubleMatXptr
SEXP vectorToDoubleMatXptr(SEXP data, int nr, int nc);
RcppExport SEXP gpuR_vectorToDoubleMatXptr(SEXP dataSEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(vectorToDoubleMatXptr(data, nr, nc));
    return __result;
END_RCPP
}
// matrixToIntXptr
SEXP matrixToIntXptr(SEXP data);
RcppExport SEXP gpuR_matrixToIntXptr(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(matrixToIntXptr(data));
    return __result;
END_RCPP
}
// matrixToFloatXptr
SEXP matrixToFloatXptr(SEXP data);
RcppExport SEXP gpuR_matrixToFloatXptr(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(matrixToFloatXptr(data));
    return __result;
END_RCPP
}
// matrixToDoubleXptr
SEXP matrixToDoubleXptr(SEXP data);
RcppExport SEXP gpuR_matrixToDoubleXptr(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(matrixToDoubleXptr(data));
    return __result;
END_RCPP
}
// dXptrToVecSEXP
SEXP dXptrToVecSEXP(SEXP ptrA);
RcppExport SEXP gpuR_dXptrToVecSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(dXptrToVecSEXP(ptrA));
    return __result;
END_RCPP
}
// fXptrToVecSEXP
SEXP fXptrToVecSEXP(SEXP ptrA);
RcppExport SEXP gpuR_fXptrToVecSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(fXptrToVecSEXP(ptrA));
    return __result;
END_RCPP
}
// iXptrToVecSEXP
SEXP iXptrToVecSEXP(SEXP ptrA);
RcppExport SEXP gpuR_iXptrToVecSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(iXptrToVecSEXP(ptrA));
    return __result;
END_RCPP
}
// dXptrToSEXP
SEXP dXptrToSEXP(SEXP ptrA);
RcppExport SEXP gpuR_dXptrToSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(dXptrToSEXP(ptrA));
    return __result;
END_RCPP
}
// fXptrToSEXP
SEXP fXptrToSEXP(SEXP ptrA);
RcppExport SEXP gpuR_fXptrToSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(fXptrToSEXP(ptrA));
    return __result;
END_RCPP
}
// iXptrToSEXP
SEXP iXptrToSEXP(SEXP ptrA);
RcppExport SEXP gpuR_iXptrToSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(iXptrToSEXP(ptrA));
    return __result;
END_RCPP
}
// emptyVecIntXptr
SEXP emptyVecIntXptr(int size);
RcppExport SEXP gpuR_emptyVecIntXptr(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(emptyVecIntXptr(size));
    return __result;
END_RCPP
}
// emptyVecFloatXptr
SEXP emptyVecFloatXptr(int size);
RcppExport SEXP gpuR_emptyVecFloatXptr(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(emptyVecFloatXptr(size));
    return __result;
END_RCPP
}
// emptyVecDoubleXptr
SEXP emptyVecDoubleXptr(int size);
RcppExport SEXP gpuR_emptyVecDoubleXptr(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(emptyVecDoubleXptr(size));
    return __result;
END_RCPP
}
// emptyIntXptr
SEXP emptyIntXptr(int nr, int nc);
RcppExport SEXP gpuR_emptyIntXptr(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(emptyIntXptr(nr, nc));
    return __result;
END_RCPP
}
// emptyFloatXptr
SEXP emptyFloatXptr(int nr, int nc);
RcppExport SEXP gpuR_emptyFloatXptr(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(emptyFloatXptr(nr, nc));
    return __result;
END_RCPP
}
// emptyDoubleXptr
SEXP emptyDoubleXptr(int nr, int nc);
RcppExport SEXP gpuR_emptyDoubleXptr(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(emptyDoubleXptr(nr, nc));
    return __result;
END_RCPP
}
// cpp_gpuInfo
List cpp_gpuInfo(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_gpuInfo(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_gpuInfo(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// cpp_gpuMatrix_iaxpy
void cpp_gpuMatrix_iaxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuMatrix_iaxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuMatrix_iaxpy(alpha_, ptrA_, ptrB_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpuMatrix_igemm
void cpp_gpuMatrix_igemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, SEXP sourceCode_);
RcppExport SEXP gpuR_cpp_gpuMatrix_igemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP sourceCode_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    cpp_gpuMatrix_igemm(ptrA_, ptrB_, ptrC_, sourceCode_);
    return R_NilValue;
END_RCPP
}
// cpp_gpu_two_vec
void cpp_gpu_two_vec(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, SEXP sourceCode_, SEXP kernel_function_);
RcppExport SEXP gpuR_cpp_gpu_two_vec(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP sourceCode_SEXP, SEXP kernel_function_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_function_(kernel_function_SEXP);
    cpp_gpu_two_vec(ptrA_, ptrB_, ptrC_, sourceCode_, kernel_function_);
    return R_NilValue;
END_RCPP
}
// cpp_platformInfo
List cpp_platformInfo(SEXP platform_idx_);
RcppExport SEXP gpuR_cpp_platformInfo(SEXP platform_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    __result = Rcpp::wrap(cpp_platformInfo(platform_idx_));
    return __result;
END_RCPP
}
// truncIntgpuMat
SEXP truncIntgpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncIntgpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncIntgpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// truncFloatgpuMat
SEXP truncFloatgpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncFloatgpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncFloatgpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// truncDoublegpuMat
SEXP truncDoublegpuMat(SEXP ptrA_, int nr, int nc);
RcppExport SEXP gpuR_truncDoublegpuMat(SEXP ptrA_SEXP, SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(truncDoublegpuMat(ptrA_, nr, nc));
    return __result;
END_RCPP
}
// cpp_dncol
int cpp_dncol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dncol(ptrA));
    return __result;
END_RCPP
}
// cpp_fncol
int cpp_fncol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fncol(ptrA));
    return __result;
END_RCPP
}
// cpp_incol
int cpp_incol(SEXP ptrA);
RcppExport SEXP gpuR_cpp_incol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_incol(ptrA));
    return __result;
END_RCPP
}
// cpp_dnrow
int cpp_dnrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dnrow(ptrA));
    return __result;
END_RCPP
}
// cpp_fnrow
int cpp_fnrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fnrow(ptrA));
    return __result;
END_RCPP
}
// cpp_inrow
int cpp_inrow(SEXP ptrA);
RcppExport SEXP gpuR_cpp_inrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_inrow(ptrA));
    return __result;
END_RCPP
}
// cpp_dgpuVec_size
int cpp_dgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_dgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_dgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_fgpuVec_size
int cpp_fgpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_fgpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_fgpuVec_size(ptrA));
    return __result;
END_RCPP
}
// cpp_igpuVec_size
int cpp_igpuVec_size(SEXP ptrA);
RcppExport SEXP gpuR_cpp_igpuVec_size(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(cpp_igpuVec_size(ptrA));
    return __result;
END_RCPP
}
// vcl_dncol
int vcl_dncol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dncol(ptrA));
    return __result;
END_RCPP
}
// vcl_fncol
int vcl_fncol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fncol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fncol(ptrA));
    return __result;
END_RCPP
}
// vcl_incol
int vcl_incol(SEXP ptrA);
RcppExport SEXP gpuR_vcl_incol(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_incol(ptrA));
    return __result;
END_RCPP
}
// vcl_dnrow
int vcl_dnrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_dnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_dnrow(ptrA));
    return __result;
END_RCPP
}
// vcl_fnrow
int vcl_fnrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_fnrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_fnrow(ptrA));
    return __result;
END_RCPP
}
// vcl_inrow
int vcl_inrow(SEXP ptrA);
RcppExport SEXP gpuR_vcl_inrow(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(vcl_inrow(ptrA));
    return __result;
END_RCPP
}
// matrixToIntVCL
SEXP matrixToIntVCL(SEXP data);
RcppExport SEXP gpuR_matrixToIntVCL(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(matrixToIntVCL(data));
    return __result;
END_RCPP
}
// matrixToFloatVCL
SEXP matrixToFloatVCL(SEXP data);
RcppExport SEXP gpuR_matrixToFloatVCL(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(matrixToFloatVCL(data));
    return __result;
END_RCPP
}
// matrixToDoubleVCL
SEXP matrixToDoubleVCL(SEXP data);
RcppExport SEXP gpuR_matrixToDoubleVCL(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    __result = Rcpp::wrap(matrixToDoubleVCL(data));
    return __result;
END_RCPP
}
// dVCLtoSEXP
SEXP dVCLtoSEXP(SEXP ptrA);
RcppExport SEXP gpuR_dVCLtoSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(dVCLtoSEXP(ptrA));
    return __result;
END_RCPP
}
// fVCLtoSEXP
SEXP fVCLtoSEXP(SEXP ptrA);
RcppExport SEXP gpuR_fVCLtoSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(fVCLtoSEXP(ptrA));
    return __result;
END_RCPP
}
// iVCLtoSEXP
SEXP iVCLtoSEXP(SEXP ptrA);
RcppExport SEXP gpuR_iVCLtoSEXP(SEXP ptrASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA(ptrASEXP);
    __result = Rcpp::wrap(iVCLtoSEXP(ptrA));
    return __result;
END_RCPP
}
// emptyIntVCL
SEXP emptyIntVCL(int nr, int nc);
RcppExport SEXP gpuR_emptyIntVCL(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(emptyIntVCL(nr, nc));
    return __result;
END_RCPP
}
// emptyFloatVCL
SEXP emptyFloatVCL(int nr, int nc);
RcppExport SEXP gpuR_emptyFloatVCL(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(emptyFloatVCL(nr, nc));
    return __result;
END_RCPP
}
// emptyDoubleVCL
SEXP emptyDoubleVCL(int nr, int nc);
RcppExport SEXP gpuR_emptyDoubleVCL(SEXP nrSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    __result = Rcpp::wrap(emptyDoubleVCL(nr, nc));
    return __result;
END_RCPP
}
// cpp_vienna_gpuMatrix_daxpy
void cpp_vienna_gpuMatrix_daxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_daxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    cpp_vienna_gpuMatrix_daxpy(alpha_, ptrA_, ptrB_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_saxpy
void cpp_vienna_gpuMatrix_saxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_saxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    cpp_vienna_gpuMatrix_saxpy(alpha_, ptrA_, ptrB_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_prod
void cpp_vienna_dgpuMatrix_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_elem_prod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_prod
void cpp_vienna_sgpuMatrix_elem_prod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_prod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_sgpuMatrix_elem_prod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_div
void cpp_vienna_dgpuMatrix_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_elem_div(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_div
void cpp_vienna_sgpuMatrix_elem_div(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_div(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_sgpuMatrix_elem_div(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_daxpy
void cpp_vclMatrix_daxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_);
RcppExport SEXP gpuR_cpp_vclMatrix_daxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    cpp_vclMatrix_daxpy(alpha_, ptrA_, ptrB_);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_saxpy
void cpp_vclMatrix_saxpy(SEXP alpha_, SEXP ptrA_, SEXP ptrB_);
RcppExport SEXP gpuR_cpp_vclMatrix_saxpy(SEXP alpha_SEXP, SEXP ptrA_SEXP, SEXP ptrB_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    cpp_vclMatrix_saxpy(alpha_, ptrA_, ptrB_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_sin
void cpp_vienna_dgpuMatrix_elem_sin(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_elem_sin(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_sin
void cpp_vienna_sgpuMatrix_elem_sin(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_sin(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_sgpuMatrix_elem_sin(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_cos
void cpp_vienna_dgpuMatrix_elem_cos(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_elem_cos(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_cos
void cpp_vienna_sgpuMatrix_elem_cos(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_cos(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_sgpuMatrix_elem_cos(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_elem_tan
void cpp_vienna_dgpuMatrix_elem_tan(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_elem_tan(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_sgpuMatrix_elem_tan
void cpp_vienna_sgpuMatrix_elem_tan(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_sgpuMatrix_elem_tan(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_sgpuMatrix_elem_tan(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_dgemm
void cpp_vienna_gpuMatrix_dgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_dgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_dgemm(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_sgemm
void cpp_vienna_gpuMatrix_sgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_sgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_sgemm(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_igemm
void cpp_vienna_gpuMatrix_igemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_igemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_igemm(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_dcrossprod
void cpp_vienna_gpuMatrix_dcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_dcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_dcrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_scrossprod
void cpp_vienna_gpuMatrix_scrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_scrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_scrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_dtcrossprod
void cpp_vienna_gpuMatrix_dtcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_dtcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_dtcrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_gpuMatrix_stcrossprod
void cpp_vienna_gpuMatrix_stcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_gpuMatrix_stcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_gpuMatrix_stcrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_vclMatrix_dgemm
void cpp_vienna_vclMatrix_dgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_vclMatrix_dgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_vclMatrix_dgemm(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_vclMatrix_sgemm
void cpp_vienna_vclMatrix_sgemm(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_vclMatrix_sgemm(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_vclMatrix_sgemm(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_dcrossprod
void cpp_vclMatrix_dcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vclMatrix_dcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vclMatrix_dcrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_scrossprod
void cpp_vclMatrix_scrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vclMatrix_scrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vclMatrix_scrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_dtcrossprod
void cpp_vclMatrix_dtcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vclMatrix_dtcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vclMatrix_dtcrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vclMatrix_stcrossprod
void cpp_vclMatrix_stcrossprod(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vclMatrix_stcrossprod(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vclMatrix_stcrossprod(ptrA_, ptrB_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_eigen
void cpp_vienna_fgpuMatrix_eigen(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, bool symmetric);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_eigen(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    cpp_vienna_fgpuMatrix_eigen(ptrA_, ptrB_, ptrC_, symmetric);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_eigen
void cpp_vienna_dgpuMatrix_eigen(SEXP ptrA_, SEXP ptrB_, SEXP ptrC_, bool symmetric);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_eigen(SEXP ptrA_SEXP, SEXP ptrB_SEXP, SEXP ptrC_SEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    cpp_vienna_dgpuMatrix_eigen(ptrA_, ptrB_, ptrC_, symmetric);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_pmcc
void cpp_vienna_fgpuMatrix_pmcc(SEXP ptrA_, SEXP ptrB_);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_pmcc(SEXP ptrA_SEXP, SEXP ptrB_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    cpp_vienna_fgpuMatrix_pmcc(ptrA_, ptrB_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_pmcc
void cpp_vienna_dgpuMatrix_pmcc(SEXP ptrA_, SEXP ptrB_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_pmcc(SEXP ptrA_SEXP, SEXP ptrB_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrB_(ptrB_SEXP);
    cpp_vienna_dgpuMatrix_pmcc(ptrA_, ptrB_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_colmean
void cpp_vienna_fgpuMatrix_colmean(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_colmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_fgpuMatrix_colmean(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_colmean
void cpp_vienna_dgpuMatrix_colmean(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_colmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_colmean(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_colsum
void cpp_vienna_fgpuMatrix_colsum(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_colsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_fgpuMatrix_colsum(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_colsum
void cpp_vienna_dgpuMatrix_colsum(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_colsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_colsum(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_rowmean
void cpp_vienna_fgpuMatrix_rowmean(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_rowmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_fgpuMatrix_rowmean(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_rowmean
void cpp_vienna_dgpuMatrix_rowmean(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_rowmean(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_rowmean(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_fgpuMatrix_rowsum
void cpp_vienna_fgpuMatrix_rowsum(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_fgpuMatrix_rowsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_fgpuMatrix_rowsum(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
// cpp_vienna_dgpuMatrix_rowsum
void cpp_vienna_dgpuMatrix_rowsum(SEXP ptrA_, SEXP ptrC_);
RcppExport SEXP gpuR_cpp_vienna_dgpuMatrix_rowsum(SEXP ptrA_SEXP, SEXP ptrC_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type ptrA_(ptrA_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptrC_(ptrC_SEXP);
    cpp_vienna_dgpuMatrix_rowsum(ptrA_, ptrC_);
    return R_NilValue;
END_RCPP
}
