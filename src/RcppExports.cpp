// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_double
void test_double(SEXP A_, SEXP B_);
RcppExport SEXP gpuR_test_double(SEXP A_SEXP, SEXP B_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    test_double(A_, B_);
    return R_NilValue;
END_RCPP
}
// test_float
void test_float(SEXP A_, SEXP B_);
RcppExport SEXP gpuR_test_float(SEXP A_SEXP, SEXP B_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    test_float(A_, B_);
    return R_NilValue;
END_RCPP
}
// cpp_detectGPUs
SEXP cpp_detectGPUs(SEXP platform_idx);
RcppExport SEXP gpuR_cpp_detectGPUs(SEXP platform_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx(platform_idxSEXP);
    __result = Rcpp::wrap(cpp_detectGPUs(platform_idx));
    return __result;
END_RCPP
}
// detectPlatforms
SEXP detectPlatforms();
RcppExport SEXP gpuR_detectPlatforms() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(detectPlatforms());
    return __result;
END_RCPP
}
// cpp_gpu_dgemm
SEXP cpp_gpu_dgemm(SEXP A_, SEXP B_, SEXP C_, bool A_isBM, bool B_isBM, bool C_isBM);
RcppExport SEXP gpuR_cpp_gpu_dgemm(SEXP A_SEXP, SEXP B_SEXP, SEXP C_SEXP, SEXP A_isBMSEXP, SEXP B_isBMSEXP, SEXP C_isBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type C_(C_SEXP);
    Rcpp::traits::input_parameter< bool >::type A_isBM(A_isBMSEXP);
    Rcpp::traits::input_parameter< bool >::type B_isBM(B_isBMSEXP);
    Rcpp::traits::input_parameter< bool >::type C_isBM(C_isBMSEXP);
    __result = Rcpp::wrap(cpp_gpu_dgemm(A_, B_, C_, A_isBM, B_isBM, C_isBM));
    return __result;
END_RCPP
}
// cpp_gpu_igemm
SEXP cpp_gpu_igemm(SEXP A_, SEXP B_, SEXP C_);
RcppExport SEXP gpuR_cpp_gpu_igemm(SEXP A_SEXP, SEXP B_SEXP, SEXP C_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type C_(C_SEXP);
    __result = Rcpp::wrap(cpp_gpu_igemm(A_, B_, C_));
    return __result;
END_RCPP
}
// cpp_gpuInfo
List cpp_gpuInfo(SEXP platform_idx_, SEXP gpu_idx_);
RcppExport SEXP gpuR_cpp_gpuInfo(SEXP platform_idx_SEXP, SEXP gpu_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type gpu_idx_(gpu_idx_SEXP);
    __result = Rcpp::wrap(cpp_gpuInfo(platform_idx_, gpu_idx_));
    return __result;
END_RCPP
}
// cpp_gpu_mat_mult
SEXP cpp_gpu_mat_mult(SEXP A_, SEXP B_, SEXP C_, SEXP sourceCode_, SEXP kernel_function_, bool A_isBM, bool B_isBM, bool C_isBM);
RcppExport SEXP gpuR_cpp_gpu_mat_mult(SEXP A_SEXP, SEXP B_SEXP, SEXP C_SEXP, SEXP sourceCode_SEXP, SEXP kernel_function_SEXP, SEXP A_isBMSEXP, SEXP B_isBMSEXP, SEXP C_isBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type C_(C_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_function_(kernel_function_SEXP);
    Rcpp::traits::input_parameter< bool >::type A_isBM(A_isBMSEXP);
    Rcpp::traits::input_parameter< bool >::type B_isBM(B_isBMSEXP);
    Rcpp::traits::input_parameter< bool >::type C_isBM(C_isBMSEXP);
    __result = Rcpp::wrap(cpp_gpu_mat_mult(A_, B_, C_, sourceCode_, kernel_function_, A_isBM, B_isBM, C_isBM));
    return __result;
END_RCPP
}
// cpp_gpu_sgemm
SEXP cpp_gpu_sgemm(SEXP A_, SEXP B_, SEXP C_, bool A_isBM, bool B_isBM, bool C_isBM);
RcppExport SEXP gpuR_cpp_gpu_sgemm(SEXP A_SEXP, SEXP B_SEXP, SEXP C_SEXP, SEXP A_isBMSEXP, SEXP B_isBMSEXP, SEXP C_isBMSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type C_(C_SEXP);
    Rcpp::traits::input_parameter< bool >::type A_isBM(A_isBMSEXP);
    Rcpp::traits::input_parameter< bool >::type B_isBM(B_isBMSEXP);
    Rcpp::traits::input_parameter< bool >::type C_isBM(C_isBMSEXP);
    __result = Rcpp::wrap(cpp_gpu_sgemm(A_, B_, C_, A_isBM, B_isBM, C_isBM));
    return __result;
END_RCPP
}
// cpp_gpu_two_vec
IntegerVector cpp_gpu_two_vec(IntegerVector A_, IntegerVector B_, IntegerVector C_, SEXP sourceCode_, SEXP kernel_function_);
RcppExport SEXP gpuR_cpp_gpu_two_vec(SEXP A_SEXP, SEXP B_SEXP, SEXP C_SEXP, SEXP sourceCode_SEXP, SEXP kernel_function_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type A_(A_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type B_(B_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type C_(C_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sourceCode_(sourceCode_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type kernel_function_(kernel_function_SEXP);
    __result = Rcpp::wrap(cpp_gpu_two_vec(A_, B_, C_, sourceCode_, kernel_function_));
    return __result;
END_RCPP
}
// cpp_platformInfo
List cpp_platformInfo(SEXP platform_idx_);
RcppExport SEXP gpuR_cpp_platformInfo(SEXP platform_idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type platform_idx_(platform_idx_SEXP);
    __result = Rcpp::wrap(cpp_platformInfo(platform_idx_));
    return __result;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP gpuR_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpp_hello_world());
    return __result;
END_RCPP
}
